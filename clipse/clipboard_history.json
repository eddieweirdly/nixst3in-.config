{"clipboardHistory":[{"value":"git push -u origin main","recorded":"2025-08-28 16:15:01.086670325","filePath":"null","pinned":false},{"value":"git branch -M main","recorded":"2025-08-28 16:14:54.729472793","filePath":"null","pinned":false},{"value":"git commit -m \"first commit\"","recorded":"2025-08-28 16:14:45.191470642","filePath":"null","pinned":false},{"value":"git add README.md","recorded":"2025-08-28 16:14:37.409380338","filePath":"null","pinned":false},{"value":"git remote add origin https://github.com/eddieweirdly/nixst3in-.config.git","recorded":"2025-08-28 16:13:51.433483622","filePath":"null","pinned":false},{"value":"about:preferences#search","recorded":"2025-08-28 15:36:06.516455694","filePath":"null","pinned":false},{"value":"https://www.mojeek.com/?theme=dark\u0026qss=Brave,DuckDuckGo,Ecosia,Qwant,Startpage\u0026qsba=1","recorded":"2025-08-28 15:34:30.088145707","filePath":"null","pinned":false},{"value":"https://www.mojeek.com/?qsba=1\u0026qss=Brave,DuckDuckGo,Ecosia,Qwant,Startpage\u0026theme=dark","recorded":"2025-08-28 15:20:34.536527778","filePath":"null","pinned":false},{"value":"https://www.mojeek.com/?qss=Brave,DuckDuckGo,Ecosia,Qwant,Startpage","recorded":"2025-08-28 15:18:43.675638755","filePath":"null","pinned":false},{"value":"https://www.mojeek.com/?theme=dark","recorded":"2025-08-28 15:16:05.711483839","filePath":"null","pinned":false},{"value":"sudo usermod -aG sudo username","recorded":"2025-08-27 20:42:58.079341720","filePath":"null","pinned":false},{"value":"    usermod -aG sudo username","recorded":"2025-08-27 20:36:09.787513905","filePath":"null","pinned":false},{"value":"nix-collect-garbage","recorded":"2025-08-27 16:41:17.499812659","filePath":"null","pinned":true},{"value":"PRESSURE_VESSEL_IMPORT_OPENXR_1_RUNTIMES=1 %command%","recorded":"2025-08-27 16:10:29.941457302","filePath":"null","pinned":false},{"value":"hardware.steam-hardware.enable","recorded":"2025-08-27 15:35:00.186761099","filePath":"null","pinned":false},{"value":"wlx-overlay-s","recorded":"2025-08-27 11:45:22.030357317","filePath":"null","pinned":true},{"value":";; Install a package via the elpaca macro\n;; See the \"recipes\" section of the manual for more details.\n\n;; (elpaca example-package)\n\n;; Install use-package support\n(elpaca elpaca-use-package\n  ;; Enable use-package :ensure support for Elpaca.\n  (elpaca-use-package-mode))\n\n;;When installing a package used in the init file itself,\n;;e.g. a package which adds a use-package key word,\n;;use the :wait recipe keyword to block until that package is installed/configured.\n;;For example:\n;;(use-package general :ensure (:wait t) :demand t)\n\n;; Expands to: (elpaca evil (use-package evil :demand t))\n(use-package evil :ensure t :demand t)\n\n;;Turns off elpaca-use-package-mode current declaration\n;;Note this will cause evaluate the declaration immediately. It is not deferred.\n;;Useful for configuring built-in emacs features.\n(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))","recorded":"2025-08-26 20:33:27.352880283","filePath":"null","pinned":false},{"value":"(setq package-enable-at-startup nil)","recorded":"2025-08-26 20:30:27.618001361","filePath":"null","pinned":false},{"value":"(defvar elpaca-installer-version 0.11)\n(defvar elpaca-directory (expand-file-name \"elpaca/\" user-emacs-directory))\n(defvar elpaca-builds-directory (expand-file-name \"builds/\" elpaca-directory))\n(defvar elpaca-repos-directory (expand-file-name \"repos/\" elpaca-directory))\n(defvar elpaca-order '(elpaca :repo \"https://github.com/progfolio/elpaca.git\"\n                              :ref nil :depth 1 :inherit ignore\n                              :files (:defaults \"elpaca-test.el\" (:exclude \"extensions\"))\n                              :build (:not elpaca--activate-package)))\n(let* ((repo  (expand-file-name \"elpaca/\" elpaca-repos-directory))\n       (build (expand-file-name \"elpaca/\" elpaca-builds-directory))\n       (order (cdr elpaca-order))\n       (default-directory repo))\n  (add-to-list 'load-path (if (file-exists-p build) build repo))\n  (unless (file-exists-p repo)\n    (make-directory repo t)\n    (when (\u003c= emacs-major-version 28) (require 'subr-x))\n    (condition-case-unless-debug err\n        (if-let* ((buffer (pop-to-buffer-same-window \"*elpaca-bootstrap*\"))\n                  ((zerop (apply #'call-process `(\"git\" nil ,buffer t \"clone\"\n                                                  ,@(when-let* ((depth (plist-get order :depth)))\n                                                      (list (format \"--depth=%d\" depth) \"--no-single-branch\"))\n                                                  ,(plist-get order :repo) ,repo))))\n                  ((zerop (call-process \"git\" nil buffer t \"checkout\"\n                                        (or (plist-get order :ref) \"--\"))))\n                  (emacs (concat invocation-directory invocation-name))\n                  ((zerop (call-process emacs nil buffer nil \"-Q\" \"-L\" \".\" \"--batch\"\n                                        \"--eval\" \"(byte-recompile-directory \\\".\\\" 0 'force)\")))\n                  ((require 'elpaca))\n                  ((elpaca-generate-autoloads \"elpaca\" repo)))\n            (progn (message \"%s\" (buffer-string)) (kill-buffer buffer))\n          (error \"%s\" (with-current-buffer buffer (buffer-string))))\n      ((error) (warn \"%s\" err) (delete-directory repo 'recursive))))\n  (unless (require 'elpaca-autoloads nil t)\n    (require 'elpaca)\n    (elpaca-generate-autoloads \"elpaca\" repo)\n    (let ((load-source-file-function nil)) (load \"./elpaca-autoloads\"))))\n(add-hook 'after-init-hook #'elpaca-process-queues)\n(elpaca `(,@elpaca-order))","recorded":"2025-08-26 20:27:27.949254636","filePath":"null","pinned":false},{"value":"/","recorded":"2025-08-26 19:45:37.859891562","filePath":"null","pinned":false},{"value":"adi1090x-plymouth-themes","recorded":"2025-08-26 12:36:05.381807388","filePath":"null","pinned":false},{"value":"sudo nix-collect-garbage -d","recorded":"2025-08-26 12:28:46.863322237","filePath":"null","pinned":false},{"value":"loader.timeout = 0;","recorded":"2025-08-26 12:08:55.462053715","filePath":"null","pinned":false},{"value":"\"quiet\" \"udev.log_level=3\"","recorded":"2025-08-26 12:05:46.469716109","filePath":"null","pinned":false},{"value":"boot.kernelParams = [ \"quiet\" \"udev.log_level=3\" ];","recorded":"2025-08-26 12:04:50.540400216","filePath":"null","pinned":false},{"value":"boot.consoleLogLevel = 0;","recorded":"2025-08-26 12:04:39.896633668","filePath":"null","pinned":false},{"value":"boot.initrd.verbose","recorded":"2025-08-26 12:03:54.307828413","filePath":"null","pinned":false},{"value":"# Enable \"Silent boot\"\n    consoleLogLevel = 3;\n    initrd.verbose = false;\n    kernelParams = [\n      \"quiet\"\n      \"splash\"\n      \"boot.shell_on_fail\"\n      \"udev.log_priority=3\"\n      \"rd.systemd.show_status=auto\"\n    ];\n    # Hide the OS choice for bootloaders.\n    # It's still possible to open the bootloader list by pressing any key\n    # It will just not appear on screen unless a key is pressed\n    loader.timeout = 0;\n\n  };\n}","recorded":"2025-08-26 11:46:04.668109172","filePath":"null","pinned":false},{"value":"enable = true;\n      theme = \"rings\";\n      themePackages = with pkgs; [\n        # By default we would install all themes\n        (adi1090x-plymouth-themes.override {\n          selected_themes = [ \"rings\" ];\n        })\n      ];\n    };","recorded":"2025-08-26 11:43:25.873474328","filePath":"null","pinned":false},{"value":"boot.plymouth = {\n      enable = true;\n      theme = \"rings\";\n      themePackages = with pkgs; [\n        # By default we would install all themes\n        (adi1090x-plymouth-themes.override {\n          selected_themes = [ \"rings\" ]\n        })\n      ];\n    };\n\n    # Enable \"Silent boot\"\n    consoleLogLevel = 3;\n    initrd.verbose = false;\n    kernelParams = [\n      \"quiet\"\n      \"splash\"\n      \"boot.shell_on_fail\"\n      \"udev.log_priority=3\"\n      \"rd.systemd.show_status=auto\"\n    ];\n    # Hide the OS choice for bootloaders.\n    # It's still possible to open the bootloader list by pressing any key\n    # It will just not appear on screen unless a key is pressed\n    loader.timeout = 0;\n\n  };\n};\n","recorded":"2025-08-26 11:37:08.021063975","filePath":"null","pinned":false},{"value":"{ pkgs, ... }: {\n  boot = {\n\n    plymouth = {\n      enable = true;\n      theme = \"rings\";\n      themePackages = with pkgs; [\n        # By default we would install all themes\n        (adi1090x-plymouth-themes.override {\n          selected_themes = [ \"rings\" ];\n        })\n      ];\n    };\n\n    # Enable \"Silent boot\"\n    consoleLogLevel = 3;\n    initrd.verbose = false;\n    kernelParams = [\n      \"quiet\"\n      \"splash\"\n      \"boot.shell_on_fail\"\n      \"udev.log_priority=3\"\n      \"rd.systemd.show_status=auto\"\n    ];\n    # Hide the OS choice for bootloaders.\n    # It's still possible to open the bootloader list by pressing any key\n    # It will just not appear on screen unless a key is pressed\n    loader.timeout = 0;\n\n  };\n}","recorded":"2025-08-26 11:28:30.459486369","filePath":"null","pinned":false},{"value":"catppuccin-mocha","recorded":"2025-08-26 11:18:05.040996041","filePath":"null","pinned":false},{"value":"\n    plymouth = {\n      enable = true;\n      theme = \"rings\";\n      themePackages = with pkgs; [\n        # By default we would install all themes\n        (adi1090x-plymouth-themes.override {\n          selected_themes = [ \"rings\" ];\n        })\n      ];\n    };\n\n    # Enable \"Silent boot\"\n    consoleLogLevel = 3;\n    initrd.verbose = false;\n    kernelParams = [\n      \"quiet\"\n      \"splash\"\n      \"boot.shell_on_fail\"\n      \"udev.log_priority=3\"\n      \"rd.systemd.show_status=auto\"\n    ];","recorded":"2025-08-26 11:05:00.975869578","filePath":"null","pinned":false},{"value":"boot.plymouth.themePackages","recorded":"2025-08-26 10:58:38.809023107","filePath":"null","pinned":false},{"value":"boot.plymouth.enable","recorded":"2025-08-26 10:58:07.759898047","filePath":"null","pinned":false},{"value":"nix-channel --update","recorded":"2025-08-25 20:10:48.379287825","filePath":"null","pinned":false},{"value":"nix-collect-garbage -d","recorded":"2025-08-25 19:59:22.975211250","filePath":"null","pinned":true},{"value":"git push","recorded":"2025-08-25 19:56:04.333674654","filePath":"null","pinned":true},{"value":"git add .","recorded":"2025-08-25 19:55:58.885063804","filePath":"null","pinned":true},{"value":"git commit -m '.'","recorded":"2025-08-25 19:55:54.290084135","filePath":"null","pinned":true},{"value":"sudo nvim ~/.config/hypr/hyprland.con","recorded":"2025-08-25 19:54:40.427798906","filePath":"null","pinned":true},{"value":"nvim home.nix","recorded":"2025-08-25 19:54:25.036580843","filePath":"null","pinned":true},{"value":"nvim configuration.nix","recorded":"2025-08-25 19:54:18.205107657","filePath":"null","pinned":true},{"value":"sudo nixos-rebuild switch --flake .","recorded":"2025-08-25 19:54:12.368824402","filePath":"null","pinned":true},{"value":"home-manager switch --flake .","recorded":"2025-08-25 19:53:51.440086582","filePath":"null","pinned":true}]}